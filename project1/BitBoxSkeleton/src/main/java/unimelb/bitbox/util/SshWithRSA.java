package unimelb.bitbox.util;

import java.io.FileReader;
import java.io.IOException;
import java.math.BigInteger;
import java.nio.file.FileSystems;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Security;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.RSAPublicKeySpec;
import java.util.Arrays;

import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.openssl.PEMDecryptorProvider;
import org.bouncycastle.openssl.PEMEncryptedKeyPair;
import org.bouncycastle.openssl.PEMKeyPair;
import org.bouncycastle.openssl.PEMParser;
import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;
import org.bouncycastle.openssl.jcajce.JcePEMDecryptorProviderBuilder;

import javax.crypto.Cipher;

/**
 * Use public key to encrypt the message and private key to decrypt the message.
 * The keys are generated by "ssh-keygen -t rsa".
 * Part of code refer from:
 * 	https://stackoverflow.com/questions/44681737/get-a-privatekey-from-a-rsa-pem-file
 * 	https://blog.csdn.net/hzzhoushaoyu/article/details/8627952
 * @author yuqiangz@student.unimelb.edu.au
 *
 */
public class SshWithRSA {
	public static byte[] decrypt(byte[] bt_encrypted, RSAPrivateKey privateKey)throws Exception{
        Cipher cipher = Cipher.getInstance("RSA");
        cipher.init(Cipher.DECRYPT_MODE, privateKey);
        byte[] bt_original = cipher.doFinal(bt_encrypted);
        return bt_original;
  	}
	
  	public static byte[] encrypt(byte[] bt_plaintext, RSAPublicKey publicKey)throws Exception{
  		//PublicKey publicKey = getPublicKey(str_pubK);
  		Cipher cipher = Cipher.getInstance("RSA");
  		cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        byte[] bt_encrypted = cipher.doFinal(bt_plaintext);
        return bt_encrypted;
  	}
	
  	/**
  	 * Convert public key in base64 decode format to RSAPublicKey object.
  	 * @param key the public key string without prefix "ssh-rsa" in base64 decode format
  	 */
	public static RSAPublicKey decodePublicKey(byte[] key) throws NoSuchAlgorithmException, InvalidKeySpecException {
		byte[] sshrsa = new byte[] { 0, 0, 0, 7, 's', 's', 'h', '-', 'r', 's', 'a' };
		int start_index = sshrsa.length;
		/* Decode the public exponent */
		int len = decodeUInt32(key, start_index);
		start_index += 4;
		byte[] pe_b = new byte[len];
		for (int i = 0; i < len; i++) {
			pe_b[i] = key[start_index++];
		}
		BigInteger pe = new BigInteger(pe_b);
		/* Decode the modulus */
		len = decodeUInt32(key, start_index);
		start_index += 4;
		byte[] md_b = new byte[len];
		for (int i = 0; i < len; i++) {
			md_b[i] = key[start_index++];
		}
		BigInteger md = new BigInteger(md_b);
		KeyFactory keyFactory = KeyFactory.getInstance("RSA");
		KeySpec ks = new RSAPublicKeySpec(md, pe);
		return (RSAPublicKey) keyFactory.generatePublic(ks);
	}

	
	public static int decodeUInt32(byte[] key, int start_index){
		byte[] test = Arrays.copyOfRange(key, start_index, start_index + 4);
		return new BigInteger(test).intValue();
	}
	
    public static RSAPrivateKey parseString2PrivateKey() throws Exception, NoSuchAlgorithmException, InvalidKeySpecException{
    	Security.addProvider(new BouncyCastleProvider());
    	String password = "";

    	// reads your key file
    	PEMParser pemParser = new PEMParser(new FileReader("clientKeystore" + FileSystems.getDefault().getSeparator() +"bitboxclient_rsa"));
    	Object object = pemParser.readObject();
    	JcaPEMKeyConverter converter = new JcaPEMKeyConverter().setProvider("BC");

    	KeyPair kp;
    	if (object instanceof PEMEncryptedKeyPair) {
    		//System.out.println("the private key part needs password!!!");
    	    // Encrypted key - we will use provided password
    	    PEMEncryptedKeyPair ckp = (PEMEncryptedKeyPair) object;
    	    // uses the password to decrypt the key
    	    PEMDecryptorProvider decProv = new JcePEMDecryptorProviderBuilder().build(password.toCharArray());
    	    kp = converter.getKeyPair(ckp.decryptKeyPair(decProv));
    	} else {
    		//System.out.println("the private key part does not need password!!!");
    	    // Unencrypted key - no password needed
    	    PEMKeyPair ukp = (PEMKeyPair) object;
    	    kp = converter.getKeyPair(ukp);
    	}

    	// RSA
    	KeyFactory keyFac = KeyFactory.getInstance("RSA");
    	PrivateKey prik = kp.getPrivate();
    	KeySpec keySpec = new PKCS8EncodedKeySpec(prik.getEncoded());
    	return (RSAPrivateKey) keyFac.generatePrivate(keySpec);
    }
}